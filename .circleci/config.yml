version: 2.1

orbs:
  node: circleci/node@5.1.0
  win: circleci/windows@5.0.0
  prodsec: snyk/prodsec-orb@1.0

defaults: &defaults
  parameters:
    node_version:
      type: string
      default: ''
  working_directory: ~/snyk-nuget-plugin

matrix_unix_node_version: &matrix_unix_node_version
  node_version: ["16.20", "18.16", "20.3"]

matrix_windows_node_version: &matrix_windows_node_version
  node_version: ["16.20.0", "18.16.0", "20.3.1"]

windows_defaults: &windows_defaults
  environment:
    npm_config_loglevel: silent
  executor:
    name: win/default
    shell: bash

filters_branches_only_main: &filters_branches_only_main
  filters:
    branches:
      only:
        - main

filters_branches_ignore_main: &filters_branches_ignore_main
  filters:
    branches:
      ignore:
        - main

commands:
  node_install_packages:
    description: Install NPM packages
    steps:
      - run:
          # The Node orb handles all the boring work for us, but they do not understand repos with no package-lock.json
          name: Create fake package-lock.json
          command: touch package-lock.json
      - node/install-packages:
          cache-only-lockfile: false
          override-ci-command: npm i

  show_node_version:
    description: Log Node and npm version
    steps:
      - run:
          name: Node version
          command: node --version
      - run:
          name: NPM version
          command: npm --version

  install_dotnet:
    description: Install the dotnet CLI
    parameters:
      os:
        type: enum
        enum: ['unix', 'windows']
      dotnet_version:
        type: string
        default: '8.0'
    steps:
      - restore_cache:
          name: Restore Dotnet executable
          keys:
            - dotnet-cli-{{ arch }}-{{<< parameters.dotnet_version >>}}-v3
      - when:
          condition:
            equal: [ 'unix', << parameters.os >> ]
          steps:
          - run:
              name: Download and install dotnet
              command: |
                if ! command -v dotnet &> /dev/null
                then
                  echo "dotnet could not be found, downloading and installing"
                  curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel << parameters.dotnet_version >> --install-dir ~/.local/apps/dotnet
                  ln -s ~/.local/apps/dotnet/dotnet ~/.local/bin/
                  exit
                fi
          - save_cache:
              key: dotnet-cli-{{ arch }}-{{<< parameters.dotnet_version >>}}-v3
              paths:
                - ~/.local/apps/dotnet
                - ~/.local/bin/dotnet
      - when:
          condition:
            equal: [ 'windows', << parameters.os >> ]
          steps:
            - run:
                name: Download and install dotnet
                # dotnet is already installed on Windows, so we can't check by just running it. Need to validate the version it returns.
                command: |
                  if [[ ! $(dotnet --version 2>&1) =~ ^<< parameters.dotnet_version >> ]]
                  then
                    echo "dotnet could not be found or was of wrong version, removing existing and downloading new"
                    rm -rf "C:\Program Files\dotnet"
                    curl -sSL https://dot.net/v1/dotnet-install.ps1 > dotnet-install.ps1
                    powershell -File dotnet-install.ps1 -Channel << parameters.dotnet_version >> -InstallDir "C:\Program Files\dotnet"
                  fi
                shell: bash.exe
            - save_cache:
                key: dotnet-cli-{{ arch }}-{{<< parameters.dotnet_version >>}}-v3
                paths:
                  - C:\Program Files\dotnet

  show_dotnet_version:
    description: Log Dotnet version
    steps:
      - run:
          name: Dotnet version
          command: dotnet --version

jobs:
  lint:
    <<: *defaults
    docker:
      - image: cimg/node:<< parameters.node_version >>
    steps:
      - checkout
      - node_install_packages
      - show_node_version
      - run:
          name: Run lint
          command: npm run lint

  test-windows:
    environment:
      DOTNET_CLI_TELEMETRY_OPTOUT: 'true'
    <<: *defaults
    <<: *windows_defaults
    steps:
      - run: git config --global core.autocrlf false
      - checkout
      - install_dotnet:
          os: 'windows'
      - show_dotnet_version
      - node/install
      - node_install_packages
      - show_node_version
      - run:
          name: Run tests
          command: npm test
          shell: bash.exe

  test-unix:
    environment:
      DOTNET_CLI_TELEMETRY_OPTOUT: 'true'
    <<: *defaults
    docker:
      - image: cimg/node:<< parameters.node_version >>
    steps:
      - checkout
      - install_dotnet:
          os: 'unix'
      - show_dotnet_version
      - node_install_packages
      - show_node_version
      - run:
          name: Run tests
          command: npm test

  release:
    <<: *defaults
    docker:
      - image: cimg/node:<< parameters.node_version >>
    resource_class: small
    steps:
      - checkout
      - node_install_packages
      - run:
          name: Publish to GitHub
          command: npx semantic-release

workflows:
  version: 2
  test_and_release:
    jobs:
      - prodsec/secrets-scan:
          name: scan-repo
          context:
            - snyk-bot-slack
          channel: os-team-managed-alerts
          <<: *filters_branches_ignore_main

      - lint:
          name: Lint
          context: nodejs-install
          node_version: '16.20'
          <<: *filters_branches_ignore_main

      # UNIX tests
      - test-unix:
          matrix:
            alias: test-unix
            parameters:
              <<: *matrix_unix_node_version
          name: Unix Tests for Node=<< matrix.node_version >>
          context: nodejs-install
          node_version: "<< matrix.node_version >>"
          requires:
            - Lint
          <<: *filters_branches_ignore_main

      # Windows tests
      - test-windows:
          matrix:
            alias: test-windows
            parameters:
              <<: *matrix_windows_node_version
          name: Windows Tests for Node=<< matrix.node_version >>
          context: nodejs-install
          node_version: "<< matrix.node_version >>"
          requires:
            - Lint
          <<: *filters_branches_ignore_main


      # Release
      - release:
          name: Release
          context: nodejs-app-release
          node_version: 'lts'
          requires:
            - scan-repo
            - test-unix
            - test-windows
          <<: *filters_branches_only_main

